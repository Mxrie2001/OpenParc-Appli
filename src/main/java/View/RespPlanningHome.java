/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
/**
 *
 * @author ceif
 */
public class RespPlanningHome extends javax.swing.JFrame {
    String driver ="com.mysql.cj.jdbc.Driver";
            String url = "jdbc:mysql://45.90.162.130:3306/admin_cpoaG4S3";
            String username = "admin_cpoa";
            String password = "5LzPRC86Gx";
    public Connection con;
    public int idj1;
    public int idj2;
    //public int idArbitreM;
    /**
     * Creates new form RespPlanningHome
     */
    public RespPlanningHome() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        ValiderButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PlanningTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(195, 68, 19));
        jPanel1.setBorder(null);

        jButton1.setText("Générer les match");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ValiderButton.setText("Valider les match");
        ValiderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValiderButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        jLabel1.setText("Responsable Planning");

        PlanningTable.setBackground(new java.awt.Color(255, 255, 255));
        PlanningTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Joueur 1", "VS", "Joueur 2", "Score", "Terrain", "Horaire", "Arbitre", "Ramasseur"
            }
        ));
        jScrollPane1.setViewportView(PlanningTable);

        jButton2.setText("Se deconnecter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(289, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(188, 188, 188)
                .addComponent(ValiderButton)
                .addGap(243, 243, 243))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(375, 375, 375)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton2)))
                .addGap(390, 390, 390)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(ValiderButton))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(96, 96, 96)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(114, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    DefaultTableModel model = new DefaultTableModel(new String[]{"Joueur 1","VS","Joueur 2","Score","Terrain","Horaire","Arbitre","Ramasseur"}, 0);// TODO add your handling code here:
    String[] lesTerrains = new String[4];
    lesTerrains[0] = "St Antoine" ;
    lesTerrains[1] = "Marie-Luce" ;
    lesTerrains[2] = "Léo Lagrange" ;
    lesTerrains[3] = "St Tropez" ;
    String[] lesHorraire = new String[4];
    lesHorraire[0] = "10" ;
    lesHorraire[1] = "12" ;
    lesHorraire[2] = "14" ;
    lesHorraire[3] = "16" ;
    String[] lesRamasseurs = new String[4];
    
    int terrCount=0;
    int horrCount=0;
    List<Integer> solution = new ArrayList<>();
        for (int i = 1; i <= 32; i++) {
            solution.add(i);
        }
        Collections.shuffle(solution);
        try {
            Class.forName(driver);
            con = DriverManager.getConnection(url,username,password);
            Integer[] tabj1 =new Integer[16];
            Integer[] tabj2 =new Integer[16];
            for (int j=0; j<16; j++){
                //la boucle fait 16 fois le tours pour créer les 16 matchs
                tabj1[j]=solution.get(j);
                solution.remove(0);
                tabj2[j]=solution.get(j);
            }
            for(int r=0;r<4;r++){
                int k = r+1;
                PreparedStatement nomRamasseur = con.prepareStatement("SELECT nom FROM equipeRamasseur where id = "+ k);
                ResultSet resNomRam = nomRamasseur.executeQuery();
                if(resNomRam.next()){
                    lesRamasseurs[r] = resNomRam.getString("nom");
                }
            }
            for (int j=0; j<16; j++){
                //la boucle fait 16 fois le tours pour créer les 16 matchs
                int id1 = tabj1[j];
                int id2 = tabj2[j];
                 // jusqu'ici on collect 2 id de la liste des joueurs pour en créer des matchs
                
                PreparedStatement stmt1 = con.prepareStatement("SELECT * FROM joueur where id = "+id1);
                ResultSet res1 = stmt1.executeQuery();
                
                PreparedStatement stmt2 = con.prepareStatement("SELECT * FROM joueur where id = "+id2);
                ResultSet res2 = stmt2.executeQuery();

                //on sctoke les données des joueurs dans des variables,
                // pas forcément toutes utile ici mais si besoin c'est là
                if(res1.next() && res2.next()){
                    idj1 = res1.getInt("id");
                    String nationalitej1 =res1.getString("nationnalite");
                    int agej1 = res1.getInt("age");
                    int idUser1 = res1.getInt("idUser");
                    //System.out.println(idj1);
                    idj2 = res2.getInt("id");
                    String nationalitej2 =res2.getString("nationnalite");
                    int agej2 = res2.getInt("age");
                    int idUser2 = res2.getInt("idUser");
                    
                    PreparedStatement infj1 = con.prepareStatement("SELECT * FROM user where id = "+idUser1);
                    ResultSet resInfj1 = infj1.executeQuery();
                    
                    PreparedStatement infj2 = con.prepareStatement("SELECT * FROM user where id = "+idUser2);
                    ResultSet resInfj2 = infj2.executeQuery();
                    PreparedStatement infArbitre = con.prepareStatement("SELECT * FROM user ,arbitre where user.id = arbitre.IdUser and "
                            + "  arbitre.nationnalite not like \""+nationalitej1 +"\" and arbitre.nationnalite not like \""+nationalitej2+"\"");
                    //infArbitre.setString(0, nationalitej1);
                    //infArbitre.setString(1, nationalitej2);
                    ResultSet resInfArbitre = infArbitre.executeQuery();
                    
                    if((resInfj1.next() && resInfj2.next()) ){
                        String InfJ1 = resInfj1.getString("nom") ;
                        String InfJ2 = resInfj2.getString("nom") ;
                        String InfArbitre = "pas d'arbitre disponible";
                        if(resInfArbitre.next()){
                            InfArbitre = resInfArbitre.getString("nom");
                            
                        }
                        String infTerrain = lesTerrains[terrCount];
                        String infHorraire = lesHorraire[horrCount];
                        horrCount=horrCount+1;
                        String infRamasseur = lesRamasseurs[terrCount];
                        if(infHorraire=="16"){
                            horrCount= 0;
                            terrCount=terrCount+1;
                        }
                        model.addRow(new Object[]{InfJ1,"   vs",InfJ2, "",infTerrain,infHorraire +" heures",InfArbitre,infRamasseur});
                        infHorraire= lesHorraire[horrCount];
                    }
                    
                    //System.out.println(idj2);
                }
                //on insert les joueurs dans un match de la table match
                

                // reste a y afficher avec l'ihm, j'ai pas testé le code mais ya
                // 0 erreurs de syntax donc ça devrait pas être horrible
            }
            PlanningTable.setModel(model);
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
/*
██████╗░██████╗░░█████╗░██████╗░██╗░░░░░███████╗███╗░░░███╗███████╗
██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║░░░░░██╔════╝████╗░████║██╔════╝
██████╔╝██████╔╝██║░░██║██████╦╝██║░░░░░█████╗░░██╔████╔██║█████╗░░
██╔═══╝░██╔══██╗██║░░██║██╔══██╗██║░░░░░██╔══╝░░██║╚██╔╝██║██╔══╝░░
██║░░░░░██║░░██║╚█████╔╝██████╦╝███████╗███████╗██║░╚═╝░██║███████╗
╚═╝░░░░░╚═╝░░╚═╝░╚════╝░╚═════╝░╚══════╝╚══════╝╚═╝░░░░░╚═╝╚══════╝
        
*/
// Le bouton ci dessus ne fonctionne pas malgrès le faite que la logique ai été comprise.
// lors du parcour de la boucle for , le select ne change pas l'ID malrgés que le nom change pour chaque itération         
// nous avons meme affiché chaque nous pour chaque itération dans la console , preuve que c'est bien un problème SQL
// problème auquel je n'ai pas trouvé de solution malgrès plus de 5h de travail sur ce problème ( jusque mardi 25 janvier 22h ! )
        
        

    private void ValiderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValiderButtonActionPerformed
        int column = 0;
        int row = 1;
        String idFinal;
        try{
            Class.forName(driver);
            con = DriverManager.getConnection(url,username,password);
                PreparedStatement verifie = con.prepareStatement("SELECT * FROM valideMatch");
                ResultSet resVerif = verifie.executeQuery();
                if(resVerif.next()){
                  int r = resVerif.getInt("r");
                  if(r<1){
                      con = DriverManager.getConnection(url,username,password);
                      PreparedStatement updateR = con.prepareStatement("UPDATE valideMatch SET r=1 WHERE r=0");
                      updateR.executeUpdate();
                      updateR.close();
                      con.close();
                        for(int i=0;i<PlanningTable.getRowCount();i++){
                            // le for parcour bien le tableau et différencie chaque string les un des autres
                            System.out.println(PlanningTable.getModel().getValueAt(i, 0).toString()+ " " + i);

                            con = DriverManager.getConnection(url,username,password);
                            // requete fonctionnant sur le PHPMYADMIN
                            PreparedStatement idJ1 = con.prepareStatement("select joueur.id from user,joueur where joueur.idUser=user.id and nom=\""+PlanningTable.getModel().getValueAt(i, 0).toString()+"\"");
                            ResultSet resId = idJ1.executeQuery();
                            if(resId.next()){
                              idFinal = resId.getString("id");
                              System.out.println(idj1);
                            }
                            // on dois faire une requete identique pour récuper l'Id du joueur 2 , l'id de l'arbtire et des ramasseurs sont très ressemblante
                            resId.close();
                            idJ1.close();
                            con.close();

                              // j'ai meme rajouté un timer pour éviter que la base de donnée soit surchargé de requete et mette un locket mais rien n'y fait
                              TimeUnit.SECONDS.sleep(3);

                    } 
                       JOptionPane.showMessageDialog(null, "Les match ont été valider avec succés !", 
                "PopUp4", JOptionPane.CLOSED_OPTION);
                  }else{
                      JOptionPane.showMessageDialog(null, "(Messages fictifs | Regardez le code ligne 250 de RespPlanningHome.java svp !) MSG INITIAL : Les match ont déja été valider ...", 
                "PopUp4", JOptionPane.CLOSED_OPTION);
                  }
                }
             

            }
            catch(Exception e){
                System.out.println(e.getMessage());
            }
        // TODO add your handling code here:
    }//GEN-LAST:event_ValiderButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        Connexion con = new Connexion();
        String[] nulité = new String[]{};
        con.main(nulité);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
        
    public void afficherleslignes(){
    try{
        Class.forName(driver);
            con = DriverManager.getConnection(url,username,password);
            for(int i=1;i<=32;i++){
                int k =i+1;
                PreparedStatement nom = con.prepareStatement("select nom from user where id=" +k);
                ResultSet resNom = nom.executeQuery();
                if(resNom.next()){
                    System.out.println(resNom.getString("nom")+" "+ i);
                };
                
            }
    }catch(Exception e){
        System.out.println(e.getMessage());
    }
}
    /**
     * 
     */
    public static void openWindow() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RespPlanningHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RespPlanningHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RespPlanningHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RespPlanningHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RespPlanningHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PlanningTable;
    private javax.swing.JButton ValiderButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
